'use client';

import React, { useEffect, useState } from 'react';
import { WebSocketMessage } from '@/lib/websocket';
import { toast } from 'sonner';
import { Bell, X, CheckCircle, AlertCircle, Info, AlertTriangle } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';

interface NotificationItem {
  id: string;
  message: WebSocketMessage;
  read: boolean;
  timestamp: Date;
}

export function RealTimeNotifications() {
  const [notifications, setNotifications] = useState<NotificationItem[]>([]);
  const [isOpen, setIsOpen] = useState(false);
  const [isWebSocketAvailable, setIsWebSocketAvailable] = useState(false);
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    // Check if we're in a browser environment and WebSocket is available
    if (typeof window !== 'undefined') {
      setIsWebSocketAvailable(true);
    }
  }, []);

  const showToastNotification = (message: WebSocketMessage) => {
    const getIcon = () => {
      switch (message.type) {
        case 'course_update':
          return <CheckCircle className="w-4 h-4" />;
        case 'payment_update':
          return <AlertCircle className="w-4 h-4" />;
        case 'system_alert':
          return <AlertTriangle className="w-4 h-4" />;
        default:
          return <Info className="w-4 h-4" />;
      }
    };

    const getTitle = () => {
      switch (message.type) {
        case 'course_update':
          return 'Course Update';
        case 'payment_update':
          return 'Payment Update';
        case 'system_alert':
          return 'System Alert';
        default:
          return 'Notification';
      }
    };

    const getDescription = () => {
      switch (message.type) {
        case 'course_update':
          return message.data.message || 'Your course has been updated';
        case 'payment_update':
          return message.data.message || 'Payment status has changed';
        case 'system_alert':
          return message.data.message || 'System notification';
        default:
          return message.data.message || 'New notification received';
      }
    };

    toast(
      <div className="flex items-start gap-3">
        {getIcon()}
        <div className="flex-1">
          <h4 className="font-medium text-sm">{getTitle()}</h4>
          <p className="text-xs text-muted-foreground">{getDescription()}</p>
        </div>
      </div>,
      {
        duration: 5000,
        position: 'top-right',
        className: 'bg-background border'
      }
    );
  };

  const markAsRead = (notificationId: string) => {
    setNotifications(prev =>
      prev.map(notification =>
        notification.id === notificationId
          ? { ...notification, read: true }
          : notification
      )
    );
  };

  const markAllAsRead = () => {
    setNotifications(prev =>
      prev.map(notification => ({ ...notification, read: true }))
    );
  };

  const clearNotifications = () => {
    setNotifications([]);
  };

  const unreadCount = notifications.filter(n => !n.read).length;
  const totalCount = notifications.length;

  const formatTime = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (minutes < 1) return 'Just now';
    if (minutes < 60) return `${minutes}m ago`;
    if (hours < 24) return `${hours}h ago`;
    return `${days}d ago`;
  };

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'course_update':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'payment_update':
        return <AlertCircle className="w-4 h-4 text-blue-500" />;
      case 'system_alert':
        return <AlertTriangle className="w-4 h-4 text-orange-500" />;
      default:
        return <Info className="w-4 h-4 text-gray-500" />;
    }
  };

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="ghost"
          size="sm"
          className="relative p-2"
          aria-label="Notifications"
        >
          <Bell className="w-5 h-5" />
          {unreadCount > 0 && (
            <Badge
              variant="destructive"
              className="absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs"
            >
              {unreadCount > 99 ? '99+' : unreadCount}
            </Badge>
          )}
          {isWebSocketAvailable && !isConnected && (
            <div className="absolute -bottom-1 -right-1 h-2 w-2 bg-red-500 rounded-full" />
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="end">
        <div className="flex items-center justify-between p-4 border-b">
          <h3 className="font-semibold">Notifications</h3>
          <div className="flex items-center gap-2">
            {unreadCount > 0 && (
              <Button
                variant="ghost"
                size="sm"
                onClick={markAllAsRead}
                className="text-xs"
              >
                Mark all read
              </Button>
            )}
            {totalCount > 0 && (
              <Button
                variant="ghost"
                size="sm"
                onClick={clearNotifications}
                className="text-xs"
              >
                Clear all
              </Button>
            )}
          </div>
        </div>
        <ScrollArea className="h-80">
          {totalCount === 0 ? (
            <div className="p-4 text-center text-muted-foreground">
              <Bell className="w-8 h-8 mx-auto mb-2 opacity-50" />
              <p className="text-sm">No notifications yet</p>
            </div>
          ) : (
            <div className="p-2">
              {notifications.map((notification) => (
                <div
                  key={notification.id}
                  className={cn(
                    "flex items-start gap-3 p-3 rounded-lg transition-colors cursor-pointer",
                    notification.read
                      ? "hover:bg-muted/50"
                      : "bg-muted/30 hover:bg-muted/50"
                  )}
                  onClick={() => markAsRead(notification.id)}
                >
                  {getNotificationIcon(notification.message.type)}
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium line-clamp-2">
                      {notification.message.data.message || 'New notification'}
                    </p>
                    <p className="text-xs text-muted-foreground mt-1">
                      {formatTime(notification.timestamp)}
                    </p>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
                    onClick={(e) => {
                      e.stopPropagation();
                      setNotifications(prev =>
                        prev.filter(n => n.id !== notification.id)
                      );
                    }}
                  >
                    <X className="w-3 h-3" />
                  </Button>
                </div>
              ))}
            </div>
          )}
        </ScrollArea>
      </PopoverContent>
    </Popover>
  );
}

export function SystemAlerts() {
  // For now, return null to avoid WebSocket issues
  // This can be re-enabled later when WebSocket is properly configured
  return null;
} 