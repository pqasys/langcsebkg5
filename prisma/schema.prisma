generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Institution {
  id                 String   @id @default(uuid()) @db.VarChar(36)
  name               String   @db.VarChar(255)
  slug               String   @unique @db.VarChar(100) // SEO-friendly URL slug
  description        String   @db.Text
  address            String   @db.VarChar(255)
  city               String   @db.VarChar(100)
  state              String?  @db.VarChar(100)
  country            String   @db.VarChar(100)
  postcode           String?  @db.VarChar(20)
  email              String   @db.VarChar(50)
  website            String?  @db.VarChar(255)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  institutionEmail   String?  @db.VarChar(100)
  telephone          String?  @db.VarChar(20)
  contactName        String?  @db.VarChar(100)
  contactJobTitle    String?  @db.VarChar(100)
  contactPhone       String?  @db.VarChar(20)
  contactEmail       String?  @db.VarChar(100)
  logoUrl            String?  @db.VarChar(255)
  facilities         String?  @db.Text
  status             String   @default("PENDING") @db.VarChar(20)
  isApproved         Boolean  @default(false)
  currency           String   @default("USD") @db.VarChar(3)
  commissionRate     Float    @default(10) @db.Float
  discountSettings   Json?
  metadata           Json?
  socialMedia        Json?
  defaultMaxStudents Int      @default(15)
  stripeCustomerId   String?  @db.VarChar(255)
  mainImageUrl       String?  @db.VarChar(255)
  subscriptionPlan   String   @default("BASIC") @db.VarChar(20)
  isFeatured         Boolean  @default(false)
  isActive           Boolean  @default(true)

  // Relations
  users user[]
  courses Course[]
  subscriptions InstitutionSubscription[]

  @@index([slug], map: "Institution_slug_idx")
  @@map("institution")
}

model Course {
  id                   String           @id @default(uuid()) @db.VarChar(36)
  title                String           @db.VarChar(100)
  slug                 String           @unique @db.VarChar(100) // SEO-friendly URL slug
  description          String?          @db.Text
  duration             Int
  level                String           @db.VarChar(20)
  status               String           @db.VarChar(20)
  institutionId        String?          @db.VarChar(36)
  categoryId           String           @db.VarChar(36)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now()) @updatedAt
  startDate            DateTime
  endDate              DateTime
  maxStudents          Int              @default(15)
  base_price           Float            @default(0)
  pricingPeriod        String           @default("WEEKLY") @db.VarChar(20)
  framework            course_framework @default(CEFR)
  isFeatured           Boolean          @default(false)
  isSponsored          Boolean          @default(false)
  priority             Int              @default(0)
  // Simplified course classification
  hasLiveClasses       Boolean          @default(false)
  liveClassType        String?
  liveClassFrequency   String?
  liveClassSchedule    Json?
  isPlatformCourse     Boolean          @default(false)
  requiresSubscription Boolean          @default(false)
  subscriptionTier     String?
  
  // Marketing fields
  marketingType        String           @default("SELF_PACED") @db.VarChar(50)
  marketingDescription String?          @db.Text

  // Relations
  institution Institution? @relation(fields: [institutionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  category category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  courseTags CourseTag[]
  videoSessions VideoSession[]
  enrollments StudentCourseEnrollment[]
  completions StudentCourseCompletion[]

  @@unique([title, institutionId], map: "Course_title_institutionId_key")
  @@index([categoryId], map: "Course_categoryId_fkey")
  @@index([institutionId], map: "Course_institutionId_fkey")
  @@index([status], map: "Course_status_idx")
  @@index([level], map: "Course_level_idx")
  @@index([createdAt], map: "Course_createdAt_idx")
  @@index([institutionId, status], map: "Course_institution_status_idx")
  @@index([createdAt], map: "idx_course_created_at")
  @@index([isPlatformCourse])
  @@index([requiresSubscription])
  @@index([hasLiveClasses])
  @@index([marketingType])
  @@index([slug], map: "Course_slug_idx")
  @@map("course")
}

model user {
  id                 String    @id @default(uuid()) @db.VarChar(36)
  name               String    @db.VarChar(255)
  email              String    @unique @db.VarChar(100)
  emailVerified      DateTime?
  image              String?   @db.VarChar(255)
  password           String    @db.VarChar(255)
  role               String    @default("STUDENT") @db.VarChar(20)
  institutionId      String?   @db.VarChar(36)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  status             String    @default("ACTIVE") @db.VarChar(20)
  forcePasswordReset Boolean   @default(false)
  profileVisibility  SocialVisibility @default(PUBLIC)
  achievementsPublic Boolean   @default(false)
  lastLoginAt        DateTime?
  subscriptionStatus String    @default("FREE") @db.VarChar(20)
  
  // Community quiz usage tracking
  monthlyQuizUsage  Int       @default(0)
  lastQuizReset     DateTime?

  // Relations
  institution Institution? @relation(fields: [institutionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  videoSessions VideoSession[]
  liveConversationsHosted     LiveConversation[]        @relation("LiveConversationHost")
  liveConversationsInstructed LiveConversation[]        @relation("LiveConversationInstructor")
  communityAnnouncements CommunityAnnouncement[]
  communityCircles CommunityCircle[]
  circlePosts CommunityCirclePost[]
  circleEvents CommunityCircleEvent[]
  circleEventAttendees CommunityCircleEventAttendee[]
  communityCircleMemberships CommunityCircleMembership[]
  circlePostLikes CommunityCirclePostLike[]
  communityQuizAttempts CommunityQuizAttempt[]

  
  // Connection relations
  sentConnectionRequests     ConnectionRequest[] @relation("ConnectionRequestSender")
  receivedConnectionRequests ConnectionRequest[] @relation("ConnectionRequestReceiver")
  connectionsAsUser1         UserConnection[]    @relation("UserConnectionUser1")
  connectionsAsUser2         UserConnection[]    @relation("UserConnectionUser2")
  
  // Connection incentives
  connectionPoints           ConnectionPoints[]
  connectionAchievements     ConnectionAchievement[]
  userRewards               UserReward[]
  
  // Certificate system
  certificates               Certificate[]
  userAchievements           UserAchievement[]
  languageProficiencyTestAttempts LanguageProficiencyTestAttempt[]
  
  // Language threshold management
  languageThresholdsCreated  LanguageAttendanceThreshold[] @relation("LanguageThresholdCreatedBy")
  languageThresholdsUpdated  LanguageAttendanceThreshold[] @relation("LanguageThresholdUpdatedBy")
  
  // Video session attendance tracking
  videoSessionAttendances VideoSessionAttendance[]
  
  // A/B testing
  abTests ABTest[]
  
  // Monitoring and alerts
  alertRules AlertRule[]

  @@index([institutionId], map: "user_institutionId_fkey")
  @@index([profileVisibility])
  @@index([lastLoginAt])
  @@map("user")
}

model booking {
  id            String   @id @default(uuid()) @db.VarChar(36)
  courseId      String   @db.VarChar(36)
  institutionId String   @db.VarChar(36)
  status        String   @db.VarChar(20)
  amount        Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  studentId     String   @db.VarChar(36)
  userId        String   @db.VarChar(36)
  stateVersion  Int      @default(1)
  version       Int      @default(1)

  @@index([courseId], map: "Booking_courseId_fkey")
  @@index([institutionId], map: "Booking_institutionId_fkey")
  @@index([studentId], map: "Booking_studentId_fkey")
  @@index([userId], map: "Booking_userId_fkey")
  @@index([courseId], map: "idx_booking_course_id")
  @@map("booking")
}

model CommissionRateLog {
  id            String   @id @default(uuid()) @db.VarChar(36)
  institutionId String   @db.VarChar(36)
  previousRate  Float
  newRate       Float
  changedBy     String   @db.VarChar(36)
  reason        String?  @db.Text
  changedAt     DateTime @default(now())

  @@index([changedBy], map: "CommissionRateLog_changedBy_idx")
  @@index([institutionId], map: "CommissionRateLog_institutionId_idx")
  @@map("commissionratelog")
}

model category {
  id          String   @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  slug        String   @unique @db.VarChar(50)

  // Relations
  courses Course[]

  @@map("category")
}

model CourseTag {
  id        String   @id @default(uuid()) @db.VarChar(36)
  courseId  String   @db.VarChar(36)
  tagId     String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tag Tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([courseId, tagId])
  @@index([courseId])
  @@index([tagId])
  @@index([courseId], map: "idx_course_tag_course_id")
  @@map("coursetag")
}

model Tag {
  id          String   @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(50)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  categoryId  String?  @db.VarChar(36)
  slug        String   @unique @db.VarChar(50)
  parentId    String?  @db.VarChar(36)
  usageCount  Int      @default(0)
  color       String?  @db.VarChar(7)
  icon        String?  @db.VarChar(50)
  featured    Boolean  @default(false)
  priority    Int      @default(0)

  // Relations
  courseTags CourseTag[]

  @@index([categoryId])
  @@index([parentId])
  @@index([name])
  @@map("tag")
}

model Student {
  id                String           @id @default(uuid()) @db.VarChar(36)
  name              String
  email             String           @unique(map: "email")
  phone             String?          @db.VarChar(20)
  address           String?          @db.Text
  bio               String?          @db.Text
  status            students_status? @default(active)
  created_at        DateTime?        @default(now()) @db.Timestamp(0)
  updated_at        DateTime?        @default(now()) @updatedAt @db.Timestamp(0)
  last_active       DateTime?        @default(now()) @db.Timestamp(0)
  stripeCustomerId  String?          @db.VarChar(255)
  date_of_birth     DateTime?        @db.Date
  gender            String?          @db.VarChar(20)
  interests         Json?
  learning_goals    String?          @db.Text
  location          String?          @db.VarChar(255)
  native_language   String?          @db.VarChar(50)
  social_links      Json?
  social_visibility SocialVisibility @default(PRIVATE)
  spoken_languages  Json?
  timezone          String?          @db.VarChar(50)
  website           String?          @db.VarChar(255)

  @@index([email], map: "idx_students_email")
  @@index([native_language])
  @@index([social_visibility])
  @@index([location(length: 250)])
  @@map("students")
}

model StudentCourseEnrollment {
  id                    String    @id @default(cuid())
  studentId             String
  courseId              String
  status                String    @default("PENDING_PAYMENT")
  progress              Float     @default(0)
  startDate             DateTime  @default(now())
  endDate               DateTime?
  paymentStatus         String    @default("PENDING")
  paymentDate           DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  stateVersion          Int       @default(1)
  version               Int       @default(1)
  accessExpiry          DateTime?
  accessMethod          String    @default("DIRECT")
  attendanceQuotaUsed   Int       @default(0)
  enrollmentQuotaUsed   Boolean   @default(false)
  enrollmentType        String    @default("COURSE_BASED")
  hasLiveClassAccess    Boolean   @default(false)
  isActive              Boolean   @default(true)
  isPlatformCourse      Boolean   @default(false)
  liveClassAccessExpiry DateTime?
  subscriptionId        String?
  subscriptionTier      String?

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([courseId])
  @@index([courseId], map: "idx_enrollment_course_id")
  @@index([enrollmentType])
  @@index([accessMethod])
  @@index([subscriptionId])
  @@index([isPlatformCourse])
  @@index([isActive])
  @@map("student_course_enrollments")
}

model StudentCourseCompletion {
  id        String   @id @default(uuid()) @db.VarChar(36)
  courseId  String   @db.VarChar(36)
  createdAt DateTime @default(now())
  status    String   @db.VarChar(20)
  studentId String   @db.VarChar(36)
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  course    Course   @relation(fields: [courseId], references: [id])

  @@index([studentId], map: "StudentCourseCompletion_studentId_fkey")
  @@index([courseId], map: "StudentCourseCompletion_courseId_fkey")
  @@index([courseId], map: "idx_completion_course_id")
  @@map("student_course_completions")
}

model Payment {
  id                String    @id @default(cuid())
  amount            Float
  status            String    @default("PENDING")
  paidAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  metadata          Json?
  institutionId     String
  enrollmentId      String
  commissionAmount  Float     @default(0)
  institutionAmount Float
  payoutId          String?
  paymentMethod     String?
  referenceNumber   String?
  notes             String?
  idempotencyKey    String?   @unique
  stateVersion      Int       @default(1)
  version           Int       @default(1)
  currency          String    @default("USD")
  paymentId         String?
  refundAmount      Float?
  refundedAt        DateTime?

  @@index([institutionId])
  @@index([enrollmentId])
  @@index([payoutId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

model InstitutionCommission {
  id            String   @id @default(cuid())
  institutionId String   @unique
  rate          Float    @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([institutionId])
  @@map("institution_commissions")
}

model InstitutionSubscription {
  id                 String    @id @default(cuid())
  institutionId      String    @unique
  status             String    @default("ACTIVE")
  startDate          DateTime  @default(now())
  endDate            DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  autoRenew          Boolean   @default(true)
  cancellationReason String?
  cancelledAt        DateTime?
  commissionTierId   String

  // Relations
  institution Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commissionTier CommissionTier @relation(fields: [commissionTierId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@index([institutionId])
  @@index([status])
  @@index([endDate])
  @@index([commissionTierId], map: "institution_subscriptions_commissionTierId_fkey")
  @@map("institution_subscriptions")
}

model CommissionTier {
  id             String   @id @default(cuid())
  planType       String   @unique
  commissionRate Float
  features       Json
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  description    String   @db.Text
  price          Float
  currency       String   @default("USD") @db.VarChar(3)
  billingCycle   String   @default("MONTHLY") @db.VarChar(20)
  maxStudents    Int      @default(10)
  maxCourses     Int      @default(5)
  maxTeachers    Int      @default(2)

  // Relations
  institutionSubscriptions InstitutionSubscription[]

  @@map("commission_tiers")
}

model InstitutionSubscriptionLog {
  id              String   @id @default(cuid())
  subscriptionId  String
  action          String
  oldPlan         String?
  newPlan         String?
  oldAmount       Float?
  newAmount       Float?
  oldBillingCycle String?
  newBillingCycle String?
  userId          String
  reason          String?
  metadata        Json?
  createdAt       DateTime @default(now())

  @@index([subscriptionId])
  @@index([action])
  @@index([createdAt])
  @@map("institution_subscription_logs")
}

model InstitutionBillingHistory {
  id             String   @id @default(cuid())
  subscriptionId String
  billingDate    DateTime
  amount         Float
  currency       String   @default("USD")
  status         String
  paymentMethod  String?
  transactionId  String?
  invoiceNumber  String?
  description    String?
  metadata       Json?
  createdAt      DateTime @default(now())

  @@index([subscriptionId])
  @@index([billingDate])
  @@index([status])
  @@map("institution_billing_history")
}

model StudentTier {
  id           String   @id @default(cuid())
  planType     String   @unique // BASIC, PREMIUM, ENTERPRISE
  name         String
  description  String   @db.Text
  price        Float
  currency     String   @default("USD") @db.VarChar(3)
  billingCycle String   @default("MONTHLY") @db.VarChar(20)
  
  // Flexible limits
  maxCourses   Int      @default(5)
  maxLiveClasses Int    @default(10)
  maxStudents  Int      @default(1) // For instructors
  maxInstructors Int    @default(1) // For institutions
  
  // Features
  features     Json     // { "hdVideo": true, "recordings": true, "analytics": true }
  
  // Governance
  enrollmentQuota Int   @default(5)
  attendanceQuota Int   @default(20)
  gracePeriodDays Int   @default(7)
  
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  subscriptions StudentSubscription[]

  @@map("student_tiers")
}

/// UserSubscription model (currently named StudentSubscription for historical reasons)
///
/// IMPORTANT: This model handles subscriptions for ALL user types, not just students:
/// - Students: Regular course-taking users
/// - Admins: Platform administrators with premium access
/// - Institution Staff: Staff members with personal subscriptions
/// - Regular Users: Any user who wants premium features
///
/// The 'studentId' field actually stores any user ID, not just student IDs.
/// This naming is historical and should be considered for future refactoring
/// to UserSubscription with a userId field.
///
/// FUTURE MIGRATION: Consider renaming to UserSubscription with userId field
/// for better clarity and to reflect the actual usage.
model StudentSubscription {
  id                   String    @id @default(cuid())
  studentId            String    @unique
  status               String    @default("ACTIVE")
  startDate            DateTime  @default(now())
  endDate              DateTime
  autoRenew            Boolean   @default(true)
  cancellationReason   String?
  cancelledAt          DateTime?
  metadata             Json?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  studentTierId        String
  attendanceQuota      Int       @default(10)
  canAccessLiveClasses Boolean   @default(false)
  canAccessRecordings  Boolean   @default(false)
  canUseHDVideo        Boolean   @default(false)
  currentEnrollments   Int       @default(0)
  enrollmentQuota      Int       @default(1)
  maxActiveCourses     Int       @default(1)
  maxEnrollments       Int       @default(1)
  monthlyAttendance    Int       @default(0)
  monthlyEnrollments   Int       @default(0)
  planType             String    @default("BASIC")

  // Relations
  studentTier StudentTier @relation(fields: [studentTierId], references: [id])

  @@index([studentId])
  @@index([status])
  @@index([endDate])
  @@index([studentTierId], map: "student_subscriptions_studentTierId_fkey")
  @@index([planType])
  @@index([currentEnrollments])
  @@map("student_subscriptions")
}

model StudentBillingHistory {
  id             String   @id @default(cuid())
  subscriptionId String
  billingDate    DateTime
  amount         Float
  currency       String   @default("USD")
  status         String
  paymentMethod  String?
  transactionId  String?
  invoiceNumber  String?
  description    String?
  metadata       Json?
  createdAt      DateTime @default(now())

  @@index([subscriptionId])
  @@index([billingDate])
  @@index([status])
  @@map("student_billing_history")
}

model SubscriptionLog {
  id              String   @id @default(cuid())
  subscriptionId  String
  action          String
  oldPlan         String?
  newPlan         String?
  oldAmount       Float?
  newAmount       Float?
  oldBillingCycle String?
  newBillingCycle String?
  userId          String
  reason          String?
  metadata        Json?
  createdAt       DateTime @default(now())

  @@index([subscriptionId])
  @@index([action])
  @@index([createdAt])
  @@map("subscription_logs")
}

model LeadEvent {
  id            String   @id @default(uuid()) @db.VarChar(36)
  institutionId String   @db.VarChar(36)
  eventType     String   @db.VarChar(50)
  timestamp     DateTime @default(now())
  userAgent     String?  @db.Text
  referrer      String?  @db.Text
  sessionId     String?  @db.VarChar(255)
  contactType   String?  @db.VarChar(50)
  contactValue  String?  @db.Text
  metadata      Json?

  @@index([institutionId])
  @@index([eventType])
  @@index([timestamp])
  @@map("lead_events")
}

model VideoSession {
  id                 String   @id @default(uuid()) @db.VarChar(36)
  title              String   @db.VarChar(255)
  description        String?  @db.Text
  sessionType        String   @db.VarChar(50)
  language           String   @db.VarChar(10)
  level              String   @db.VarChar(20)
  maxParticipants    Int      @default(10)
  startTime          DateTime
  endTime            DateTime
  duration           Int
  status             String   @default("SCHEDULED") @db.VarChar(20)
  meetingUrl         String?  @db.VarChar(500)
  meetingId          String?  @db.VarChar(100)
  recordingUrl       String?  @db.VarChar(500)
  instructorId       String   @db.VarChar(36)
  institutionId      String?  @db.VarChar(36)
  courseId           String?  @db.VarChar(36)
  moduleId           String?  @db.VarChar(36)
  price              Float    @default(0)
  isPublic           Boolean  @default(false)
  isRecorded         Boolean  @default(false)
  allowChat          Boolean  @default(true)
  allowScreenShare   Boolean  @default(true)
  allowRecording     Boolean  @default(false)
  metadata           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  currency           String   @default("USD") @db.VarChar(3)
  features           Json?
  isBooked           Boolean  @default(false)
  isCancelled        Boolean  @default(false)
  isCompleted        Boolean  @default(false)
  materials          Json?
  rating             Float?   @db.Float
  reviews            Int      @default(0)
  tags               Json?
  isAutoGenerated    Boolean  @default(false)
  isRecurring        Boolean  @default(false)
  recurringPatternId String?
  sessionNumber      Int?

  // Minimum attendance threshold fields for profitability
  minAttendanceThreshold Int      @default(4) // Minimum students required for class to run
  profitMarginThreshold  Int      @default(8) // Minimum students for platform to earn profit
  instructorHourlyRate   Float    @default(25.0) // Instructor cost per hour
  platformRevenuePerStudent Float @default(24.99) // Revenue per premium subscriber
  autoCancelIfBelowThreshold Boolean @default(true) // Auto-cancel if below minimum
  cancellationDeadline   DateTime? // Deadline for cancellation (e.g., 24h before class)
  attendanceCheckTime    DateTime? // When to check attendance threshold
  thresholdCheckStatus   String    @default("PENDING") @db.VarChar(20) // PENDING, PASSED, FAILED, CANCELLED

  // Relations
  instructor user @relation(fields: [instructorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  participants VideoSessionParticipant[]
  likes VideoSessionLike[]
  attendances VideoSessionAttendance[]

  @@index([instructorId])
  @@index([courseId])
  @@index([institutionId])
  @@index([startTime])
  @@index([status])
  @@index([language])
  @@index([level])
  @@index([moduleId], map: "video_sessions_moduleId_fkey")
  @@index([recurringPatternId])
  @@index([isRecurring])
  @@index([thresholdCheckStatus])
  @@index([attendanceCheckTime])
  @@map("video_sessions")
}

model VideoSessionLike {
  id        String       @id @default(uuid()) @db.VarChar(36)
  sessionId String       @db.VarChar(36)
  userId    String       @db.VarChar(36)
  createdAt DateTime     @default(now())

  // Relations
  session VideoSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@index([sessionId])
  @@index([userId])
  @@map("video_session_likes")
}

model VideoSessionAttendance {
  id        String    @id @default(uuid()) @db.VarChar(36)
  userId    String    @db.VarChar(36)
  sessionId String    @db.VarChar(36)
  attended  Boolean   @default(false)
  attendedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user    user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session VideoSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId])
  @@index([userId])
  @@index([sessionId])
  @@index([attendedAt])
  @@index([createdAt])
  @@map("video_session_attendances")
}

model ABTest {
  id                    String    @id @default(uuid()) @db.VarChar(36)
  name                  String    @db.VarChar(255)
  description           String?   @db.Text
  language              String    @db.VarChar(50)
  country               String?   @db.VarChar(100)
  region                String?   @db.VarChar(100)
  variantAThreshold     Int       @default(5)
  variantAProfitMargin  Float     @default(20.0)
  variantAInstructorRate Float    @default(50.0)
  variantAPlatformRevenue Float   @default(15.0)
  variantBThreshold     Int       @default(5)
  variantBProfitMargin  Float     @default(20.0)
  variantBInstructorRate Float    @default(50.0)
  variantBPlatformRevenue Float   @default(15.0)
  trafficSplit          Int       @default(50) // percentage to variant B
  startDate             DateTime
  endDate               DateTime
  status                String    @default("DRAFT") @db.VarChar(20) // DRAFT, ACTIVE, PAUSED, COMPLETED
  createdBy             String    @db.VarChar(36)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  createdByUser user    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  sessions     ABTestSession[]

  @@index([language])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([createdBy])
  @@map("ab_tests")
}

model ABTestSession {
  id        String    @id @default(uuid()) @db.VarChar(36)
  testId    String    @db.VarChar(36)
  variant   String    @db.VarChar(1) // A or B
  sessionId String    @db.VarChar(36)
  attendance Int      @default(0)
  revenue   Float     @default(0.0)
  cost      Float     @default(0.0)
  profit    Float     @default(0.0)
  createdAt DateTime  @default(now())

  test    ABTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([variant])
  @@index([sessionId])
  @@index([createdAt])
  @@map("ab_test_sessions")
}

model AlertRule {
  id                    String    @id @default(uuid()) @db.VarChar(36)
  name                  String    @db.VarChar(255)
  description           String?   @db.Text
  language              String    @db.VarChar(50)
  country               String?   @db.VarChar(100)
  region                String?   @db.VarChar(100)
  metric                String    @db.VarChar(50) // CANCELLATION_RATE, PROFIT_MARGIN, etc.
  operator              String    @db.VarChar(20) // GREATER_THAN, LESS_THAN, etc.
  threshold             Float
  timeWindow            Int       @default(60) // in minutes
  severity              String    @default("MEDIUM") @db.VarChar(20) // LOW, MEDIUM, HIGH, CRITICAL
  enabled               Boolean   @default(true)
  notificationChannels  String    @db.Text // JSON array of channels
  createdBy             String    @db.VarChar(36)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  createdByUser user    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  alerts       Alert[]

  @@index([language])
  @@index([enabled])
  @@index([severity])
  @@index([createdBy])
  @@map("alert_rules")
}

model Alert {
  id              String    @id @default(uuid()) @db.VarChar(36)
  ruleId          String    @db.VarChar(36)
  language        String    @db.VarChar(50)
  country         String?   @db.VarChar(100)
  region          String?   @db.VarChar(100)
  metric          String    @db.VarChar(50)
  currentValue    Float
  threshold       Float
  severity        String    @db.VarChar(20)
  message         String    @db.Text
  status          String    @default("ACTIVE") @db.VarChar(20) // ACTIVE, ACKNOWLEDGED, RESOLVED
  triggeredAt     DateTime  @default(now())
  acknowledgedAt  DateTime?
  resolvedAt      DateTime?
  acknowledgedBy  String?   @db.VarChar(36)

  rule AlertRule  @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@index([ruleId])
  @@index([language])
  @@index([status])
  @@index([severity])
  @@index([triggeredAt])
  @@map("alerts")
}

model RecurringSessionPattern {
  id               String   @id @default(uuid()) @db.VarChar(36)
  courseId         String
  patternType      String
  frequency        String
  dayOfWeek        Int?
  timeOfDay        String
  duration         Int
  timezone         String   @default("UTC")
  startDate        DateTime
  endDate          DateTime
  maxParticipants  Int      @default(10)
  isPublic         Boolean  @default(false)
  isRecorded       Boolean  @default(false)
  allowChat        Boolean  @default(true)
  allowScreenShare Boolean  @default(true)
  isActive         Boolean  @default(true)
  autoGenerate     Boolean  @default(true)

  @@index([courseId])
  @@index([isActive])
  @@map("recurring_session_patterns")
}

model VideoSessionParticipant {
  id                String    @id @default(uuid()) @db.VarChar(36)
  sessionId         String    @db.VarChar(36)
  userId            String    @db.VarChar(36)
  role              String    @default("PARTICIPANT") @db.VarChar(20)
  joinedAt          DateTime?
  leftAt            DateTime?
  duration          Int       @default(0)
  isActive          Boolean   @default(false)
  deviceInfo        Json?
  connectionQuality String?   @db.VarChar(20)
  lastSeen          DateTime?
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
  attendanceType    String    @default("REGULAR")
  quotaUsed         Boolean   @default(false)
  subscriptionId    String?

  // Relations
  session VideoSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@index([sessionId])
  @@index([userId])
  @@index([isActive])
  @@index([subscriptionId])
  @@index([quotaUsed])
  @@map("video_session_participants")
}

model VideoSessionMessage {
  id          String   @id @default(uuid()) @db.VarChar(36)
  sessionId   String   @db.VarChar(36)
  userId      String   @db.VarChar(36)
  messageType String   @db.VarChar(20)
  content     String   @db.Text
  timestamp   DateTime @default(now())
  isPrivate   Boolean  @default(false)
  recipientId String?  @db.VarChar(36)
  metadata    Json?

  @@index([sessionId])
  @@index([timestamp])
  @@index([recipientId], map: "video_session_messages_recipientId_fkey")
  @@index([userId])
  @@map("video_session_messages")
}

model LiveConversation {
  id                  String   @id @default(uuid()) @db.VarChar(36)
  title               String   @db.VarChar(255)
  description         String?  @db.Text
  conversationType    String   @db.VarChar(50)
  language            String   @db.VarChar(50)
  level               String   @db.VarChar(20)
  startTime           DateTime
  endTime             DateTime
  duration            Int
  maxParticipants     Int      @default(8)
  currentParticipants Int      @default(0)
  price               Float    @default(0)
  isPublic            Boolean  @default(true)
  isFree              Boolean  @default(false)
  status              String   @default("SCHEDULED") @db.VarChar(20)
  meetingUrl          String?  @db.VarChar(500)
  meetingId           String?  @db.VarChar(100)
  meetingPassword     String?  @db.VarChar(100)
  instructorId        String?  @db.VarChar(36)
  hostId              String   @db.VarChar(36)
  topic               String?  @db.VarChar(255)
  culturalNotes       String?  @db.Text
  vocabularyList      Json?
  grammarPoints       Json?
  conversationPrompts Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  metadata            Json?

  // Per-session subscription gating
  requiresSubscription   Boolean @default(false)
  allowedStudentTiers    Json?
  allowedInstitutionTiers Json?

  // Relations
  host       user     @relation("LiveConversationHost", fields: [hostId], references: [id])
  instructor user?    @relation("LiveConversationInstructor", fields: [instructorId], references: [id])
  participants LiveConversationParticipant[]
  bookings     LiveConversationBooking[]

  @@index([instructorId])
  @@index([hostId])
  @@index([startTime])
  @@index([status])
  @@index([language])
  @@index([level])
  @@index([conversationType])
  @@index([isFree])
  @@map("live_conversations")
}

model LiveConversationParticipant {
  id             String    @id @default(uuid()) @db.VarChar(36)
  conversationId String    @db.VarChar(36)
  userId         String    @db.VarChar(36)
  joinedAt       DateTime  @default(now())
  leftAt         DateTime?
  duration       Int       @default(0)
  isInstructor   Boolean   @default(false)
  isHost         Boolean   @default(false)
  status         String    @default("JOINED") @db.VarChar(20)
  speakingTime   Int       @default(0)
  messageCount   Int       @default(0)
  feedback       Json?
  metadata       Json?

  // Relations
  conversation LiveConversation @relation(fields: [conversationId], references: [id])

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@index([status])
  @@map("live_conversation_participants")
}

model LiveConversationMessage {
  id              String   @id @default(uuid()) @db.VarChar(36)
  conversationId  String   @db.VarChar(36)
  senderId        String   @db.VarChar(36)
  recipientId     String?  @db.VarChar(36)
  content         String   @db.Text
  messageType     String   @default("TEXT") @db.VarChar(20)
  language        String   @db.VarChar(50)
  isTranslation   Boolean  @default(false)
  originalMessage String?  @db.VarChar(36)
  timestamp       DateTime @default(now())
  isRead          Boolean  @default(false)
  metadata        Json?

  @@index([conversationId])
  @@index([senderId])
  @@index([recipientId])
  @@index([timestamp])
  @@index([messageType])
  @@map("live_conversation_messages")
}

model LiveConversationBooking {
  id             String    @id @default(uuid()) @db.VarChar(36)
  conversationId String    @db.VarChar(36)
  userId         String    @db.VarChar(36)
  status         String    @default("CONFIRMED") @db.VarChar(20)
  bookedAt       DateTime  @default(now())
  cancelledAt    DateTime?
  paymentStatus  String    @default("PAID") @db.VarChar(20)
  amount         Float     @default(0)
  currency       String    @default("USD") @db.VarChar(3)
  paymentMethod  String?   @db.VarChar(50)
  transactionId  String?   @db.VarChar(255)
  refundReason   String?   @db.Text
  metadata       Json?

  // Relations
  conversation LiveConversation @relation(fields: [conversationId], references: [id])

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([status])
  @@index([paymentStatus])
  @@index([userId])
  @@map("live_conversation_bookings")
}

model content_items {
  id          String             @id @db.VarChar(36)
  module_id   String             @db.VarChar(36)
  type        content_items_type
  title       String             @db.VarChar(255)
  order_index Int                @default(0)
  created_at  DateTime?          @default(now()) @db.Timestamp(0)
  updated_at  DateTime?          @default(now()) @db.Timestamp(0)
  content     String             @db.Text

  @@index([module_id], map: "idx_content_items_module_id")
  @@map("content_items")
}

model exercises {
  id          String         @id @db.VarChar(36)
  module_id   String         @db.VarChar(36)
  type        exercises_type
  question    String         @db.Text
  options     Json?
  order_index Int            @default(0)
  created_at  DateTime?      @default(now()) @db.Timestamp(0)
  updated_at  DateTime?      @default(now()) @db.Timestamp(0)
  answer      String         @db.Text

  @@index([module_id], map: "idx_exercises_module_id")
  @@map("exercises")
}

model modules {
  id                 String        @id @db.VarChar(36)
  course_id          String        @db.VarChar(36)
  title              String        @db.VarChar(255)
  description        String?       @db.Text
  level              modules_level
  order_index        Int           @default(0)
  estimated_duration Int           @default(0)
  vocabulary_list    String?       @db.Text
  grammar_points     String?       @db.Text
  cultural_notes     String?       @db.Text
  is_published       Boolean?      @default(false)
  created_at         DateTime?     @default(now()) @db.Timestamp(0)
  updated_at         DateTime?     @default(now()) @db.Timestamp(0)

  @@index([course_id], map: "idx_modules_course_id")
  @@index([order_index], map: "idx_modules_order_index")
  @@index([course_id, order_index], map: "idx_modules_course_order")
  @@map("modules")
}

model quiz_questions {
  id                 String              @id @db.VarChar(36)
  quiz_id            String              @db.VarChar(36)
  type               quiz_questions_type @default(MULTIPLE_CHOICE)
  question           String              @db.Text
  options            Json?
  correct_answer     String?             @db.Text
  points             Int                 @default(1)
  order_index        Int                 @default(0)
  created_at         DateTime?           @default(now()) @db.Timestamp(0)
  updated_at         DateTime?           @default(now()) @updatedAt @db.Timestamp(0)
  average_time_spent Int                 @default(0)
  category           String?             @db.VarChar(100)
  difficulty         String              @default("MEDIUM") @db.VarChar(20)
  explanation        String?             @db.Text
  hints              Json?
  success_rate       Float               @default(0)
  tags               Json?
  times_asked        Int                 @default(0)
  times_correct      Int                 @default(0)
  irt_difficulty     Float?
  irt_discrimination Float?
  irt_guessing       Float?
  irt_last_updated   DateTime?           @db.Timestamp(0)
  media_type         String?             @db.VarChar(50)
  media_url          String?             @db.VarChar(500)
  question_config    Json?

  // Relations
  quiz quizzes @relation(fields: [quiz_id], references: [id], onDelete: Cascade)

  @@index([quiz_id], map: "idx_quiz_questions_quiz_id")
  @@map("quiz_questions")
}

model quizzes {
  id                String    @id @db.VarChar(36)
  module_id         String    @db.VarChar(36)
  title             String    @db.VarChar(255)
  description       String?   @db.Text
  passing_score     Int
  time_limit        Int?
  created_at        DateTime? @default(now()) @db.Timestamp(0)
  updated_at        DateTime? @default(now()) @updatedAt @db.Timestamp(0)
  mediaUrl          String?   @db.VarChar(255)
  allow_retry       Boolean   @default(true)
  average_score     Float     @default(0)
  average_time      Float     @default(0)
  category          String?   @db.VarChar(100)
  difficulty        String    @default("MEDIUM") @db.VarChar(20)
  instructions      String?   @db.Text
  max_attempts      Int       @default(3)
  quiz_type         String    @default("STANDARD") @db.VarChar(20)
  show_explanations Boolean   @default(false)
  show_results      Boolean   @default(true)
  shuffle_questions Boolean   @default(false)
  success_rate      Float     @default(0)
  tags              Json?
  total_attempts    Int       @default(0)
  total_completions Int       @default(0)
  adaptive_config   Json?
  initial_ability   Float     @default(0)
  max_questions     Int       @default(20)
  min_questions     Int       @default(5)
  target_precision  Float     @default(0.3)

  // Relations
  quiz_questions quiz_questions[]
  communityQuizAttempts CommunityQuizAttempt[]

  @@index([module_id], map: "idx_quizzes_module_id")
  @@map("quizzes")
}

model student_progress {
  id                  String    @id @db.VarChar(36)
  student_id          String    @db.VarChar(36)
  module_id           String    @db.VarChar(36)
  content_completed   Boolean?  @default(false)
  exercises_completed Boolean?  @default(false)
  quiz_completed      Boolean?  @default(false)
  quiz_score          Int?
  started_at          DateTime? @default(now()) @db.Timestamp(0)
  completed_at        DateTime? @db.Timestamp(0)

  @@unique([student_id, module_id], map: "unique_student_module")
  @@index([module_id], map: "idx_student_progress_module_id")
  @@index([student_id], map: "idx_student_progress_student_id")
}

model ModuleProgress {
  id                  String    @id @default(uuid()) @db.VarChar(36)
  moduleId            String    @db.VarChar(36)
  studentId           String    @db.VarChar(36)
  contentCompleted    Boolean   @default(false)
  exercisesCompleted  Boolean   @default(false)
  quizCompleted       Boolean   @default(false)
  startedAt           DateTime  @default(now())
  completedAt         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  difficultyRating    Int?
  feedback            String?   @db.Text
  lastAccessedAt      DateTime? @default(now())
  notes               String?   @db.Text
  quizScore           Int?
  timeSpent           Int       @default(0)
  achievementUnlocked Boolean   @default(false)
  averageSessionTime  Int       @default(0)
  bestQuizScore       Int?
  lastStudyDate       DateTime?
  learningStreak      Int       @default(0)
  retryAttempts       Int       @default(0)
  sessionCount        Int       @default(0)

  @@unique([moduleId, studentId], name: "module_student_unique")
  @@index([moduleId], map: "module_progress_module_id_idx")
  @@index([studentId], map: "module_progress_student_id_idx")
  @@map("module_progress")
}

model LearningSession {
  id               String    @id @default(uuid()) @db.VarChar(36)
  moduleProgressId String    @db.VarChar(36)
  startedAt        DateTime  @default(now())
  endedAt          DateTime?
  duration         Int       @default(0)
  activityType     String    @db.VarChar(50)
  completed        Boolean   @default(false)
  notes            String?   @db.Text

  @@index([moduleProgressId])
  @@index([startedAt])
  @@map("learning_sessions")
}

model StudentAchievement {
  id          String   @id @default(uuid()) @db.VarChar(36)
  studentId   String   @db.VarChar(36)
  metadata    Json?
  achievement String   @db.VarChar(100)
  earnedAt    DateTime @default(now())

  @@index([studentId])
  @@map("student_achievements")
}

model ExerciseAttempt {
  id          String   @id @default(uuid()) @db.VarChar(36)
  exerciseId  String   @db.VarChar(36)
  studentId   String   @db.VarChar(36)
  userAnswer  String   @db.Text
  isCorrect   Boolean
  submittedAt DateTime @default(now())

  @@index([exerciseId])
  @@index([studentId])
  @@map("exercise_attempts")
}

model QuizAttempt {
  id                 String    @id @db.VarChar(36)
  score              Int
  percentage         Float
  status             String    @default("IN_PROGRESS") @db.VarChar(20)
  ability_estimate   Float?
  adaptive_history   Json?
  attempt_number     Int       @default(1)
  completed_at       DateTime? @db.Timestamp(0)
  confidence_level   Float?
  device_info        Json?
  ip_address         String?   @db.VarChar(45)
  is_adaptive        Boolean   @default(false)
  passed             Boolean
  questions_answered Int       @default(0)
  quiz_id            String    @db.VarChar(36)
  started_at         DateTime  @default(now()) @db.Timestamp(0)
  student_id         String    @db.VarChar(36)
  termination_reason String?   @db.VarChar(50)
  time_spent         Int?
  total_points       Int
  user_agent         String?   @db.Text

  @@index([quiz_id], map: "idx_quiz_attempts_quiz_id")
  @@index([student_id], map: "idx_quiz_attempts_student_id")
  @@map("quiz_attempts")
}

model QuizResponse {
  id           String   @id @default(uuid()) @db.VarChar(36)
  attemptId    String   @db.VarChar(36)
  questionId   String   @db.VarChar(36)
  studentId    String   @db.VarChar(36)
  answer       String?  @db.Text
  isCorrect    Boolean?
  pointsEarned Int      @default(0)
  timeSpent    Int      @default(0)
  answeredAt   DateTime @default(now())

  @@unique([attemptId, questionId])
  @@index([attemptId])
  @@index([questionId])
  @@index([studentId])
  @@map("quiz_responses")
}

model NotificationTemplate {
  id        String   @id @default(uuid()) @db.VarChar(36)
  name      String   @unique @db.VarChar(100)
  type      String   @db.VarChar(50)
  subject   String?  @db.VarChar(200)
  title     String   @db.VarChar(200)
  content   String   @db.Text
  variables Json?
  isActive  Boolean  @default(true)
  isDefault Boolean  @default(false)
  category  String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar(36)
  updatedBy String?  @db.VarChar(36)

  @@index([type])
  @@index([category])
  @@index([isActive])
  @@index([createdBy], map: "notification_templates_createdBy_fkey")
  @@index([updatedBy], map: "notification_templates_updatedBy_fkey")
  @@map("notification_templates")
}

model NotificationLog {
  id             String    @id @default(uuid()) @db.VarChar(36)
  templateId     String?   @db.VarChar(36)
  recipientId    String    @db.VarChar(36)
  recipientEmail String    @db.VarChar(255)
  recipientName  String    @db.VarChar(255)
  type           String    @db.VarChar(50)
  subject        String?   @db.VarChar(200)
  title          String    @db.VarChar(200)
  content        String    @db.Text
  status         String    @db.VarChar(20)
  errorMessage   String?   @db.Text
  sentAt         DateTime?
  readAt         DateTime?
  metadata       Json?
  createdAt      DateTime  @default(now())
  createdBy      String?   @db.VarChar(36)

  @@index([recipientId])
  @@index([type])
  @@index([status])
  @@index([sentAt])
  @@index([templateId])
  @@index([createdBy], map: "notification_logs_createdBy_fkey")
  @@map("notification_logs")
}

model SystemNotification {
  id                 String    @id @default(uuid()) @db.VarChar(36)
  title              String    @db.VarChar(200)
  content            String    @db.Text
  type               String    @db.VarChar(50)
  priority           String    @default("normal") @db.VarChar(20)
  isActive           Boolean   @default(true)
  isGlobal           Boolean   @default(false)
  targetRoles        String?   @db.VarChar(255)
  targetInstitutions String?   @db.VarChar(500)
  startDate          DateTime?
  endDate            DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  createdBy          String    @db.VarChar(36)
  updatedBy          String?   @db.VarChar(36)

  @@index([type])
  @@index([priority])
  @@index([isActive])
  @@index([isGlobal])
  @@index([startDate])
  @@index([endDate])
  @@index([createdBy], map: "system_notifications_createdBy_fkey")
  @@index([updatedBy], map: "system_notifications_updatedBy_fkey")
  @@map("system_notifications")
}

model PendingWebSocketNotification {
  id        String    @id @default(uuid()) @db.VarChar(36)
  userId    String    @db.VarChar(36)
  type      String    @db.VarChar(50)
  data      Json
  timestamp DateTime  @default(now())
  sent      Boolean   @default(false)
  sentAt    DateTime?
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([sent])
  @@index([timestamp])
  @@map("pending_websocket_notifications")
}

model AuditLog {
  id         String   @id @default(uuid()) @db.VarChar(36)
  userId     String?  @db.VarChar(36)
  action     String   @db.VarChar(100)
  resource   String   @db.VarChar(100)
  resourceId String?  @db.VarChar(36)
  details    Json?
  ipAddress  String?  @db.VarChar(45)
  userAgent  String?  @db.Text
  sessionId  String?  @db.VarChar(255)
  severity   String   @db.VarChar(20)
  category   String   @db.VarChar(50)
  metadata   Json?
  timestamp  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([severity])
  @@index([category])
  @@index([timestamp])
  @@index([ipAddress])
  @@map("audit_logs")
}

model RateLimitLog {
  id         String   @id @default(uuid()) @db.VarChar(36)
  name       String   @db.VarChar(100)
  identifier String   @db.VarChar(255)
  count      Int      @default(1)
  allowed    Boolean  @default(true)
  timestamp  DateTime @default(now())
  metadata   Json?

  @@index([name])
  @@index([identifier(length: 250)])
  @@index([timestamp])
  @@index([allowed])
  @@map("rate_limit_logs")
}

model QuestionTemplate {
  id              String                  @id @default(uuid()) @db.VarChar(36)
  name            String                  @db.VarChar(255)
  description     String?                 @db.Text
  type            question_templates_type
  template_config Json
  category        String?                 @db.VarChar(100)
  difficulty      String                  @default("MEDIUM") @db.VarChar(20)
  tags            Json?
  is_public       Boolean                 @default(false)
  created_by      String                  @db.VarChar(36)
  created_at      DateTime                @default(now()) @db.Timestamp(0)
  updated_at      DateTime                @default(now()) @updatedAt @db.Timestamp(0)
  version         Int                     @default(1)

  @@index([created_by])
  @@index([type])
  @@index([category])
  @@index([version])
  @@map("question_templates")
}

model QuestionTemplateVersion {
  id            String   @id @default(uuid()) @db.VarChar(36)
  changes       Json
  createdAt     DateTime @default(now())
  createdBy     String   @db.VarChar(36)
  notes         String?  @db.Text
  templateId    String   @db.VarChar(36)
  versionNumber Int

  @@unique([templateId, versionNumber])
  @@index([templateId])
  @@index([createdBy])
  @@map("question_template_versions")
}

model QuestionTemplateUsage {
  id                   String   @id @default(uuid()) @db.VarChar(36)
  customizationLevel   String   @default("none") @db.VarChar(20)
  institutionId        String   @db.VarChar(36)
  metadata             Json?
  targetQuestionBankId String?  @db.VarChar(36)
  templateId           String   @db.VarChar(36)
  usageContext         String   @db.VarChar(50)
  usedAt               DateTime @default(now())
  usedBy               String   @db.VarChar(36)

  @@index([templateId])
  @@index([usedBy])
  @@index([institutionId])
  @@index([usageContext])
  @@index([usedAt])
  @@map("question_template_usage")
}

model QuestionTemplateSuggestion {
  id               String    @id @default(uuid()) @db.VarChar(36)
  title            String    @db.VarChar(255)
  description      String    @db.Text
  status           String    @default("PENDING") @db.VarChar(20)
  confidence       Float     @default(0)
  createdAt        DateTime  @default(now())
  implementedAt    DateTime?
  reviewedAt       DateTime?
  reviewedBy       String?   @db.VarChar(36)
  suggestedChanges Json
  suggestionType   String    @db.VarChar(50)
  templateId       String    @db.VarChar(36)

  @@index([templateId])
  @@index([reviewedBy])
  @@index([status])
  @@index([createdAt])
  @@map("question_template_suggestions")
}

model QuestionBank {
  id          String   @id @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  category    String?  @db.VarChar(100)
  tags        Json?
  is_public   Boolean  @default(false)
  created_by  String   @db.VarChar(36)
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(0)

  @@index([created_by])
  @@index([category])
  @@map("question_banks")
}

model QuestionBankItem {
  id             String   @id @default(uuid()) @db.VarChar(36)
  addedAt        DateTime @default(now())
  addedBy        String   @db.VarChar(36)
  orderIndex     Int      @default(0)
  questionBankId String   @db.VarChar(36)
  questionId     String   @db.VarChar(36)

  @@unique([questionBankId, questionId])
  @@index([questionBankId])
  @@index([questionId])
  @@index([addedBy], map: "question_bank_items_addedBy_fkey")
  @@map("question_bank_items")
}

model QuestionOption {
  id          String  @id @default(uuid()) @db.VarChar(36)
  question_id String  @db.VarChar(36)
  option_type String  @db.VarChar(50)
  content     String  @db.Text
  media_url   String? @db.VarChar(500)
  order_index Int     @default(0)
  is_correct  Boolean @default(false)
  points      Int     @default(0)
  metadata    Json?

  @@index([question_id])
  @@map("question_options")
}

model InstitutionPermissions {
  id                 String   @id @default(cuid())
  institutionId      String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  canCreateCourses   Boolean  @default(false)
  canEditCourses     Boolean  @default(false)
  canDeleteCourses   Boolean  @default(false)
  canPublishCourses  Boolean  @default(false)
  canCreateContent   Boolean  @default(false)
  canEditContent     Boolean  @default(false)
  canDeleteContent   Boolean  @default(false)
  canUploadMedia     Boolean  @default(false)
  canCreateQuizzes   Boolean  @default(false)
  canEditQuizzes     Boolean  @default(false)
  canDeleteQuizzes   Boolean  @default(false)
  canViewQuizResults Boolean  @default(false)
  canViewStudents    Boolean  @default(false)
  canManageStudents  Boolean  @default(false)
  canViewEnrollments Boolean  @default(false)
  canViewPayments    Boolean  @default(false)
  canViewPayouts     Boolean  @default(false)
  canManagePricing   Boolean  @default(false)
  canViewAnalytics   Boolean  @default(false)
  canViewReports     Boolean  @default(false)
  canExportData      Boolean  @default(false)
  canEditProfile     Boolean  @default(false)
  canManageUsers     Boolean  @default(false)
  canViewSettings    Boolean  @default(false)

  @@index([institutionId])
  @@map("institution_permissions")
}

model EmailSettings {
  id                 String   @id @default("1")
  host               String
  port               Int
  secure             Boolean  @default(true)
  username           String
  password           String
  fromEmail          String
  fromName           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  rejectUnauthorized Boolean  @default(false)

  @@map("email_settings")
}

model AdminSettings {
  id                                   String   @id @default("1")
  createdAt                            DateTime @default(now())
  updatedAt                            DateTime @updatedAt
  allowInstitutionPaymentApproval      Boolean  @default(true)
  showInstitutionApprovalButtons       Boolean  @default(true)
  defaultPaymentStatus                 String   @default("PENDING")
  institutionApprovableMethods         Json
  adminOnlyMethods                     Json
  institutionPaymentApprovalExemptions Json
  fileUploadMaxSizeMB                  Int      @default(10)

  @@map("admin_settings")
}

model StudentNotificationPreferences {
  id                     String   @id @default(uuid()) @db.VarChar(36)
  student_id             String   @unique @db.VarChar(36)
  email_notifications    Boolean  @default(true)
  push_notifications     Boolean  @default(true)
  sms_notifications      Boolean  @default(false)
  course_updates         Boolean  @default(true)
  assignment_reminders   Boolean  @default(true)
  payment_reminders      Boolean  @default(true)
  created_at             DateTime @default(now()) @db.Timestamp(0)
  updated_at             DateTime @default(now()) @updatedAt @db.Timestamp(0)
  achievement_alerts     Boolean  @default(true)
  assignment_deadlines   Boolean  @default(true)
  assignment_feedback    Boolean  @default(true)
  assignment_grades      Boolean  @default(true)
  course_announcements   Boolean  @default(true)
  course_reminders       Boolean  @default(true)
  course_schedule        Boolean  @default(true)
  group_messages         Boolean  @default(true)
  instructor_messages    Boolean  @default(true)
  milestone_reached      Boolean  @default(true)
  notification_frequency String   @default("DAILY") @db.VarChar(20)
  payment_confirmation   Boolean  @default(true)
  payment_failed         Boolean  @default(true)
  payment_receipts       Boolean  @default(true)
  progress_updates       Boolean  @default(true)
  system_announcements   Boolean  @default(true)

  @@map("student_notification_preferences")
}

model course_monthly_price {
  id          String   @id @db.VarChar(36)
  courseId    String   @db.VarChar(36)
  monthNumber Int
  year        Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([courseId, monthNumber, year], map: "CourseMonthlyPrice_courseId_monthNumber_year_key")
  @@index([courseId], map: "CourseMonthlyPrice_courseId_fkey")
}

model course_pricing_rules {
  id        String   @id @db.VarChar(36)
  courseId  String   @db.VarChar(36)
  ruleType  String   @db.VarChar(20)
  ruleValue Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
}

model course_weekly_prices {
  id         String   @id @db.VarChar(36)
  courseId   String   @db.VarChar(36)
  weekNumber Int
  year       Int
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([courseId])
}

model institution_payouts {
  id            String   @id
  institutionId String
  enrollmentId  String
  amount        Float
  status        String
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime

  @@index([enrollmentId])
  @@index([institutionId])
}

model module_skills {
  module_id String @db.VarChar(36)
  skill     String @db.VarChar(50)

  @@id([module_id, skill])
}

model student_institutions {
  id             String                      @id @db.VarChar(36)
  student_id     String                      @db.VarChar(36)
  institution_id String                      @db.VarChar(36)
  created_at     DateTime                    @default(now()) @db.Timestamp(0)
  updated_at     DateTime                    @default(now()) @db.Timestamp(0)
  notes          String?                     @db.Text
  status         student_institutions_status @default(INQUIRY)

  @@unique([student_id, institution_id])
  @@index([institution_id])
  @@index([student_id])
}

model tagrelation {
  id        String   @id @db.VarChar(36)
  tagId     String   @db.VarChar(36)
  relatedId String   @db.VarChar(36)
  strength  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([tagId, relatedId], map: "tagRelation_tagId_relatedId_key")
  @@index([relatedId], map: "tagRelation_relatedId_idx")
  @@index([tagId], map: "tagRelation_tagId_idx")
}

model video_session_recordings {
  id           String   @id @db.VarChar(36)
  sessionId    String   @db.VarChar(36)
  recordingUrl String   @db.VarChar(500)
  duration     Int
  fileSize     Int
  quality      String   @db.VarChar(20)
  status       String   @default("PROCESSING") @db.VarChar(20)
  thumbnailUrl String?  @db.VarChar(500)
  transcript   String?  @db.Text
  metadata     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([sessionId])
  @@index([status])
}

enum course_framework {
  CEFR
  ACTFL
  JLPT
  HSK
  TOPIK
}

enum students_status {
  active
  inactive
}

enum SocialVisibility {
  PUBLIC
  PRIVATE
  FRIENDS_ONLY
}

enum content_items_type {
  VIDEO
  AUDIO
  IMAGE
  DOCUMENT
}

enum exercises_type {
  MULTIPLE_CHOICE
  FILL_IN_BLANK
  MATCHING
  SHORT_ANSWER
}

enum modules_level {
  CEFR_A1
  CEFR_A2
  CEFR_B1
  CEFR_B2
  CEFR_C1
  CEFR_C2
  ACTFL_NOVICE_LOW
  ACTFL_NOVICE_MID
  ACTFL_NOVICE_HIGH
  ACTFL_INTERMEDIATE_LOW
  ACTFL_INTERMEDIATE_MID
  ACTFL_INTERMEDIATE_HIGH
  ACTFL_ADVANCED_LOW
  ACTFL_ADVANCED_MID
  ACTFL_ADVANCED_HIGH
  ACTFL_SUPERIOR
  JLPT_N5
  JLPT_N4
  JLPT_N3
  JLPT_N2
  JLPT_N1
  HSK_1
  HSK_2
  HSK_3
  HSK_4
  HSK_5
  HSK_6
  TOPIK_1
  TOPIK_2
  TOPIK_3
  TOPIK_4
  TOPIK_5
  TOPIK_6
}

enum quiz_questions_type {
  MULTIPLE_CHOICE
  FILL_IN_BLANK
  MATCHING
  SHORT_ANSWER
  TRUE_FALSE
  ESSAY
  DRAG_AND_DROP
  HOTSPOT
}

enum question_templates_type {
  MULTIPLE_CHOICE
  FILL_IN_BLANK
  MATCHING
  SHORT_ANSWER
  TRUE_FALSE
  ESSAY
  DRAG_AND_DROP
  HOTSPOT
}

enum student_institutions_status {
  INQUIRY
  APPLIED
  REVIEWING
  ACCEPTED
  REJECTED
  ENROLLED
  ALUMNI
  MEMBER
}

// Language Proficiency Test Models
model LanguageProficiencyQuestionBank {
  id             String   @id @default(uuid()) @db.VarChar(36)
  languageCode   String   @unique @db.VarChar(10)
  name           String   @db.VarChar(255)
  description    String?  @db.Text
  totalQuestions Int      @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  questions LanguageProficiencyQuestion[]

  @@map("language_proficiency_question_banks")
}

model LanguageProficiencyQuestion {
  id             String   @id @default(uuid()) @db.VarChar(36)
  bankId         String   @db.VarChar(36)
  level          String   @db.VarChar(10)
  category       String?  @db.VarChar(50)
  difficulty     String   @default("medium") @db.VarChar(20)
  question       String   @db.Text
  options        Json
  correctAnswer  String   @db.Text
  explanation    String?  @db.Text
  usageCount     Int      @default(0)
  successRate    Float    @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  bank LanguageProficiencyQuestionBank @relation(fields: [bankId], references: [id], onDelete: Cascade)

  @@index([bankId])
  @@index([level])
  @@index([category])
  @@index([difficulty])
  @@index([isActive])
  @@map("language_proficiency_questions")
}

model LanguageProficiencyTestAttempt {
  id           String   @id @default(uuid()) @db.VarChar(36)
  userId       String   @db.VarChar(36)
  languageCode String   @db.VarChar(10)
  score        Int
  level        String   @db.VarChar(10)
  answers      Json
  timeSpent    Int      @default(0)
  completedAt  DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relations
  user         user @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificate  Certificate?

  @@index([userId])
  @@index([languageCode])
  @@index([completedAt])
  @@map("language_proficiency_test_attempts")
}

// Design Configuration Models for Promotional and Advertising Items
model DesignConfig {
  id          String   @id @default(cuid())
  name        String   // Human-readable name for the design
  description String?  // Optional description
  
  // Background settings
  backgroundType       String   @default("solid") // solid, gradient, image, pattern
  backgroundColor      String   @default("#ffffff")
  backgroundGradientFrom String @default("#667eea")
  backgroundGradientTo   String @default("#764ba2")
  backgroundGradientDirection String @default("to-r")
  backgroundImage      String?  // URL to background image
  backgroundPattern    String   @default("none")
  backgroundOpacity    Int      @default(100)
  
  // Typography settings
  titleFont           String   @default("inter")
  titleSize           Int      @default(16)
  titleWeight         String   @default("semibold")
  titleColor          String   @default("#1f2937")
  titleAlignment      Json?    // Complex alignment object
  titleShadow         Boolean  @default(false)
  titleShadowColor    String   @default("#000000")
  
  descriptionFont     String   @default("inter")
  descriptionSize     Int      @default(14)
  descriptionColor    String   @default("#6b7280")
  descriptionAlignment Json?   // Complex alignment object
  
  // Layout settings
  padding             Int      @default(16)
  borderRadius        Int      @default(8)
  borderWidth         Int      @default(1)
  borderColor         String   @default("#e5e7eb")
  borderStyle         String   @default("solid")
  
  // Effects settings
  shadow              Boolean  @default(true)
  shadowColor         String   @default("rgba(0, 0, 0, 0.1)")
  shadowBlur          Int      @default(10)
  shadowOffset        Int      @default(4)
  
  // Animation settings
  hoverEffect         String   @default("scale") // none, scale, glow, slide, bounce
  animationDuration   Int      @default(300)
  
  // Custom CSS
  customCSS           String?  @db.Text
  
  // Metadata
  isActive            Boolean  @default(true)
  isDefault           Boolean  @default(false)
  createdBy           String?  // User ID who created this config
  itemId              String?  // ID of the promotional item this config is for
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Approval workflow
  isApproved          Boolean  @default(false)
  approvedBy          String?  // Admin ID who approved this config
  approvedAt          DateTime?
  approvalStatus      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  approvalNotes       String?  @db.Text // Notes from admin approval process
  
  // Relationships
  promotionalItems    PromotionalItem[]
  advertisingItems    AdvertisingItem[]
  
  @@map("design_configs")
}

model PromotionalItem {
  id          String   @id @default(cuid())
  type        String   // institution, course, third-party
  title       String
  description String
  imageUrl    String?
  ctaText     String
  ctaLink     String
  badge       String?
  
  // Stats
  students    Int?
  courses     Int?
  rating      Float?
  
  priority    Int      @default(0)
  isSponsored Boolean  @default(false)
  isActive    Boolean  @default(true)
  
  // Design configuration
  designConfigId String?
  designConfig   DesignConfig? @relation(fields: [designConfigId], references: [id])
  
  // Metadata
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("promotional_items")
}

model AdvertisingItem {
  id          String   @id @default(cuid())
  type        String   // banner, sidebar, popup, interstitial
  title       String
  description String
  imageUrl    String?
  ctaText     String
  ctaLink     String
  
  // Targeting
  targetAudience String? // student, institution, all
  targetLocation String? // courses, dashboard, sidebar
  targetDevice  String? // desktop, mobile, all
  
  // Display settings
  startDate   DateTime?
  endDate     DateTime?
  maxImpressions Int?
  currentImpressions Int @default(0)
  maxClicks   Int?
  currentClicks Int @default(0)
  
  // Design configuration
  designConfigId String?
  designConfig   DesignConfig? @relation(fields: [designConfigId], references: [id])
  
  // Status
  isActive    Boolean  @default(true)
  isApproved  Boolean  @default(false)
  
  // Metadata
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("advertising_items")
}

// Generic Ratings System
// Supports rating multiple target types (institutions, courses, instructors, content)
enum RatingTargetType {
  INSTITUTION
  COURSE
  INSTRUCTOR
  CONTENT
}

model Rating {
  id         String           @id @default(cuid())
  targetType RatingTargetType
  targetId   String           @db.VarChar(36)
  userId     String           @db.VarChar(36)
  rating     Int              // 1 - 5
  comment    String?          @db.Text
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@unique([userId, targetType, targetId], name: "unique_user_target_rating")
  @@index([targetType, targetId], name: "idx_ratings_target")
  @@index([userId], name: "idx_ratings_user")
  @@map("ratings")
}

model DesignTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // promotional, advertising, general
  
  // Template configuration (JSON)
  config      Json     // Serialized DesignConfig
  
  // Preview
  previewImage String?
  
  // Usage stats
  usageCount  Int      @default(0)
  isPublic    Boolean  @default(false)
  
  // Metadata
  createdBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("design_templates")
}

// Community Circles (lightweight groups for free-tier engagement)
model CommunityCircle {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(120)
  language    String?  @db.VarChar(10)
  level       String?  @db.VarChar(20)
  description String?  @db.Text
  ownerId     String?  @db.VarChar(36)
  isPublic    Boolean  @default(true)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members CommunityCircleMembership[]
  posts CommunityCirclePost[]
  events CommunityCircleEvent[]
  communityQuizAttempts CommunityQuizAttempt[]
  owner user? @relation(fields: [ownerId], references: [id], onDelete: SetNull)

  @@index([language])
  @@index([level])
  @@index([isPublic])
  @@map("community_circles")
}

model CommunityCircleMembership {
  id        String   @id @default(cuid())
  circleId  String   @db.VarChar(36)
  userId    String   @db.VarChar(36)
  role      String   @default("MEMBER") @db.VarChar(20)
  joinedAt  DateTime @default(now())

  // Relations
  circle CommunityCircle @relation(fields: [circleId], references: [id], onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([circleId, userId], name: "circleId_userId")
  @@index([userId])
  @@map("community_circle_memberships")
}

// Community Circle Posts (discussions within circles)
model CommunityCirclePost {
  id        String   @id @default(cuid())
  circleId  String   @db.VarChar(36)
  authorId  String   @db.VarChar(36)
  content   String   @db.Text
  parentId  String?  @db.VarChar(36) // For threaded replies
  level     Int      @default(0) // Depth level for threading
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  circle CommunityCircle @relation(fields: [circleId], references: [id], onDelete: Cascade)
  author user @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent CommunityCirclePost? @relation("PostReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies CommunityCirclePost[] @relation("PostReplies")
  likes CommunityCirclePostLike[]

  @@index([circleId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
  @@map("community_circle_posts")
}

// Community Circle Post Likes
model CommunityCirclePostLike {
  id        String   @id @default(cuid())
  postId    String   @db.VarChar(36)
  userId    String   @db.VarChar(36)
  createdAt DateTime @default(now())

  // Relations
  post CommunityCirclePost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@map("community_circle_post_likes")
}

// Community Circle Events (study sessions, workshops, etc.)
model CommunityCircleEvent {
  id           String   @id @default(cuid())
  circleId     String   @db.VarChar(36)
  createdBy    String   @db.VarChar(36)
  title        String   @db.VarChar(200)
  description  String   @db.Text
  date         DateTime
  time         String   @db.VarChar(10) // HH:MM format
  duration     Int      // in minutes
  type         String   @db.VarChar(50) // study-session, conversation, workshop, social, live-class
  maxAttendees Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  circle CommunityCircle @relation(fields: [circleId], references: [id], onDelete: Cascade)
  creator user @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  attendees CommunityCircleEventAttendee[]

  @@index([circleId])
  @@index([createdBy])
  @@index([date])
  @@index([type])
  @@map("community_circle_events")
}

// Community Circle Event Attendees
model CommunityCircleEventAttendee {
  id        String   @id @default(cuid())
  eventId   String   @db.VarChar(36)
  userId    String   @db.VarChar(36)
  joinedAt  DateTime @default(now())
  status    String   @default("REGISTERED") @db.VarChar(20) // REGISTERED, ATTENDED, NO_SHOW

  // Relations
  event CommunityCircleEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([eventId])
  @@index([userId])
  @@index([status])
  @@map("community_circle_event_attendees")
}

// Community Quiz Attempts
model CommunityQuizAttempt {
  id                String   @id @default(cuid())
  userId            String   @db.VarChar(36)
  quizId            String   @db.VarChar(36)
  circleId          String?  @db.VarChar(36)
  attemptNumber     Int      @default(1)
  score             Int
  percentage        Float
  passed            Boolean
  questionsAnswered Int
  timeSpent         Int      // in seconds
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  status            String   @default("IN_PROGRESS") // IN_PROGRESS, COMPLETED, ABANDONED
  
  // Relations
  user   user @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz   quizzes @relation(fields: [quizId], references: [id], onDelete: Cascade)
  circle CommunityCircle? @relation(fields: [circleId], references: [id], onDelete: SetNull)
  
  @@unique([userId, quizId, attemptNumber])
  @@index([userId])
  @@index([quizId])
  @@index([circleId])
  @@index([status])
  @@map("community_quiz_attempts")
}

// Community Announcements (achievement sharing and community engagement)
model CommunityAnnouncement {
  id          String   @id @default(cuid())
  userId      String   @db.VarChar(36)
  certificateId String? @db.VarChar(36)
  type        String   @db.VarChar(50)
  title       String   @db.VarChar(200)
  message     String   @db.Text
  language    String   @db.VarChar(10)
  cefrLevel   String   @db.VarChar(10)
  likes       Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificate Certificate? @relation(fields: [certificateId], references: [id], onDelete: SetNull)
  
  // Likes relation
  likes_relation CommunityAnnouncementLike[]

  @@index([userId])
  @@index([type])
  @@index([language])
  @@index([isPublic])
  @@index([createdAt])
  @@map("community_announcements")
}

// Community Announcement Likes
model CommunityAnnouncementLike {
  id             String   @id @default(cuid())
  announcementId String   @db.VarChar(36)
  userId         String   @db.VarChar(36)
  createdAt      DateTime @default(now())

  announcement CommunityAnnouncement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([announcementId, userId], name: "announcementId_userId")
  @@index([userId])
  @@map("community_announcement_likes")
}

// User Connection Models
model ConnectionRequest {
  id          String   @id @default(uuid()) @db.VarChar(36)
  senderId    String   @db.VarChar(36)
  receiverId  String   @db.VarChar(36)
  message     String?  @db.Text
  status      ConnectionRequestStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  respondedAt DateTime?

  // Relations
  sender   user @relation("ConnectionRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver user @relation("ConnectionRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@index([createdAt])
  @@map("connection_requests")
}

model UserConnection {
  id        String   @id @default(uuid()) @db.VarChar(36)
  user1Id   String   @db.VarChar(36)
  user2Id   String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user1 user @relation("UserConnectionUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2 user @relation("UserConnectionUser2", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([createdAt])
  @@map("user_connections")
}

enum ConnectionRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

// Connection Incentives System
model ConnectionPoints {
  id          String   @id @default(uuid()) @db.VarChar(36)
  userId      String   @db.VarChar(36)
  activityType String  @db.VarChar(50)
  points      Int
  description String?  @db.Text
  createdAt   DateTime @default(now())

  // Relations
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
  @@map("connection_points")
}

model ConnectionAchievement {
  id              String   @id @default(uuid()) @db.VarChar(36)
  userId          String   @db.VarChar(36)
  achievementType String   @db.VarChar(50)
  title           String   @db.VarChar(100)
  description     String?  @db.Text
  icon            String   @db.VarChar(10)
  points          Int
  earnedAt        DateTime @default(now())

  // Relations
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([achievementType])
  @@index([earnedAt])
  @@map("connection_achievements")
}

model UserReward {
  id          String    @id @default(uuid()) @db.VarChar(36)
  userId      String    @db.VarChar(36)
  rewardType  String    @db.VarChar(50)
  description String?   @db.Text
  redeemedAt  DateTime  @default(now())
  expiresAt   DateTime?

  // Relations
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rewardType])
  @@index([redeemedAt])
  @@map("user_rewards")
}

// Certificate System Models
model Certificate {
  id              String   @id @default(uuid()) @db.VarChar(36)
  certificateId   String   @unique @db.VarChar(100)
  userId          String   @db.VarChar(36)
  testAttemptId   String   @unique @db.VarChar(36)
  language        String   @db.VarChar(10)
  languageName    String   @db.VarChar(50)
  cefrLevel       String   @db.VarChar(10)
  score           Int
  totalQuestions  Int
  completionDate  DateTime
  certificateUrl  String?  @db.Text
  isPublic        Boolean  @default(false)
  sharedAt        DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            user @relation(fields: [userId], references: [id], onDelete: Cascade)
  testAttempt     LanguageProficiencyTestAttempt @relation(fields: [testAttemptId], references: [id], onDelete: Cascade)
  achievements    UserAchievement[]
  announcements   CommunityAnnouncement[]

  @@index([userId])
  @@index([certificateId])
  @@index([language])
  @@index([cefrLevel])
  @@index([completionDate])
  @@map("certificates")
}

model UserAchievement {
  id            String   @id @default(uuid()) @db.VarChar(36)
  userId        String   @db.VarChar(36)
  certificateId String?  @db.VarChar(36)
  type          String   @db.VarChar(50)
  title         String   @db.VarChar(100)
  description   String?  @db.Text
  icon          String   @db.VarChar(10)
  color         String   @db.VarChar(20)
  isPublic      Boolean  @default(false)
  createdAt     DateTime @default(now())

  // Relations
  user          user @relation(fields: [userId], references: [id], onDelete: Cascade)
  certificate   Certificate? @relation(fields: [certificateId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("user_achievements")
}

model LanguageAttendanceThreshold {
  id                        String   @id @default(uuid()) @db.VarChar(36)
  language                  String   @db.VarChar(10) // Language code (e.g., "en", "es", "fr")
  country                   String?  @db.VarChar(50) // Optional country code (e.g., "US", "UK", "CA")
  region                    String?  @db.VarChar(50) // Optional region (e.g., "North America", "Europe")
  minAttendanceThreshold    Int      @default(4) // Minimum students required for class to run
  profitMarginThreshold     Int      @default(8) // Minimum students for platform to earn profit
  instructorHourlyRate      Float    @default(25.0) // Instructor cost per hour for this language/region
  platformRevenuePerStudent Float    @default(24.99) // Revenue per student for this language/region
  autoCancelIfBelowThreshold Boolean @default(true) // Auto-cancel if below minimum
  cancellationDeadlineHours Int      @default(24) // Hours before class to check
  isActive                  Boolean  @default(true) // Whether this threshold configuration is active
  priority                  Int      @default(0) // Priority for matching (higher = more specific)
  notes                     String?  @db.Text // Admin notes about this configuration
  createdBy                 String   @db.VarChar(36) // Admin who created this configuration
  updatedBy                 String   @db.VarChar(36) // Admin who last updated this configuration
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  // Relations
  createdByUser             user     @relation("LanguageThresholdCreatedBy", fields: [createdBy], references: [id])
  updatedByUser             user     @relation("LanguageThresholdUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([language, country, region])
  @@index([language, country, region, isActive])
  @@index([priority])
}

